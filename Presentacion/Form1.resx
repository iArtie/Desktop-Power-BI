<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AElFTkSuQmCC
</value>
  </data>
</root>